#!/bin/bash
# feedgrass: Activate or create GRASS GIS database and execute given commands
#
# Example usage:

# Use commands with -e option:
#     $ feedgrass -b /usr/bin/grass70 -g /opt/grass70/ -d ~/GRASSDATA/ -l mylocation -e "g.region -p; g.list rast"
#
# Use stdin:
#     $ echo "g.region -p; g.list rast" | feedgrass -b /usr/bin/grass70 -g /opt/grass70/ -d ~/GRASSDATA/ -l test -e \-
#     $ echo "g.region -p; g.list rast" | feedgrass -b /usr/bin/grass70 -g /opt/grass70/ -d ~/GRASSDATA/ -l test
#
# Create GRASS DATABASE:
#     $ feedgrass -b /usr/bin/grass70 -g /usr/lib/grass70 -d /tmp/GRASS -l mylocation  -t my_raster.tif -e 'r.in.gdal input=my_raster.tif output=raster; r.univar raster'
#
# Dependency: GRASS GIS
#
# Author: kolesov.dm@gmail.com
# License: BSD-2 Clause

# This code uses https://github.com/jeroenjanssens/data-science-at-the-command-line/blob/master/tools/Rio
# as a source for ideas and some code.

usage() {
cat << EOF
feedgrass: Activate or create GRASS GIS database and execute given commands

usage: feedgrass OPTIONS

OPTIONS:
   -e      Commands to execute
   -h      Show this message and exit
   -g      GISBASE   (path to GRASS directory)
   -b      BINARY GRASS FILE   (name of GRASS GIS executable)
   -d      GRASS DATABASE (is ignored if '-t' option used)
   -l      GRASS LOCATION (is ignored if '-t' option used)
   -m      GRASS MAPSET (is ignored if '-t' option used; PERMANENT is default)
   -t      Create create given database, location or mapset if it doesn't exist
                a georefernced file must be provided to create the location
   -q      Quiet

EXAMPLES:
    $ echo "g.region -p; g.list rast" | \
        feedgrass -b /usr/bin/grass70 -g /opt/grass70/ -d ${HOME}/GRASSDATA/ -l test
    $ feedgrass -b /usr/bin/grass70 -g /opt/grass70/ -d ${HOME}/GRASSDATA/ -l mylocation \
        -e "g.region -p; g.list rast"
    $ feedgrass -b /usr/bin/grass70 -g /usr/lib/grass70 -d /tmp/GRASS -l mylocation \
        -t my_raster.tif \
        -e 'r.in.gdal input=my_raster.tif output=raster; r.univar raster'

EOF
}

SCRIPT=-
DATABASE=
LOCATION=
MAPSET=PERMANENT
GEOFILE=
QUIET=false


finish() {
    rm -f $IN $OUT ${ERR}
    ${GISBASE}/etc/clean_temp
    rm $GISRC
}

trap finish EXIT


# OSX `mktemp' requires a temp file template, but Linux `mktemp' has it as optional.
# This explicitly uses a template, which works for both.  The $TMPDIR is in case
# it isn't set as an enviroment variable, assumes you have /tmp.
if [ -z "$TMPDIR" ]; then
    TMPDIR=/tmp/
fi

createLocation(){
    # Create TEMP location using a georeferenced file
    # set up DATABASE/LOCATION variables

    ${BINARY}  -e -c $1 "${DATABASE}/${LOCATION}"
}

initGRASS(){
    if [ -n "$GEOFILE" ]
    then
        createLocation $GEOFILE
    fi

    # PATHs
    export GISBASE=$GISBASE
    export PATH=$PATH:${GISBASE}/bin:${GISBASE}/scripts

    if [ "$LD_LIBRARY_PATH" == "" ]
    then
        export LD_LIBRARY_PATH=${GISBASE}/lib
    else
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${GISBASE}/lib
    fi
    export GIS_LOCK=$$

    # Create GISRC file
    export GISRC=$HOME/.grassrc.$GIS_LOCK

    echo "GISDBASE: $DATABASE" > "$GISRC"
    echo "LOCATION_NAME: $LOCATION" >> "$GISRC"
    echo "MAPSET: $MAPSET" >> "$GISRC"
    echo "GRASS_GUI: text" >> "$GISRC"
}

callGRASS() {
    if [ "$SCRIPT" == "-" ]
        then
            cat /dev/stdin >> "${IN}"
    else
        echo "$SCRIPT" >> "${IN}"
    fi
    source "${IN}"
}


while getopts "t:hqg:b:e:d:l:m:" OPTION
do
    case $OPTION in
        e)
            SCRIPT=$OPTARG
            ;;
        g)
            GISBASE=$OPTARG
            ;;
        b)
            BINARY=$OPTARG
            ;;
        d)
            DATABASE=$OPTARG
            ;;
        l)
            LOCATION=$OPTARG
            ;;
        m)
            MAPSET=$OPTARG
            ;;
        t)  GEOFILE=$OPTARG
            ;;
        h)
            usage
            exit 1
            ;;
        q)
            QUIET=true
            ;;
        ?)
            usage
            exit
        ;;
    esac
done


IN=$(mktemp ${TMPDIR}/GRASS-XXXXXXXX)
OUT=$(mktemp ${TMPDIR}/GRASS-XXXXXXXX).out
ERR=$(mktemp ${TMPDIR}/GRASS-XXXXXXXX).err


initGRASS

if $QUIET
then
    callGRASS > "$OUT" 2> "$ERR"
else
    callGRASS
fi



