#!/bin/bash
# feedgrass: Activate or create GRASS GIS database and execute given commands
#
# Example usage:

# Use commands with -e option:
#     $ feedgrass -g /opt/grass70/ -d ~/GRASSDATA/ -l mylocation -e "g.region -p; g.list rast"
#
# Use stdin:
#     $ echo "g.region -p; g.list rast" | feedgrass -g /opt/grass70/ -d ~/GRASSDATA/ -l test -e \-
#     $ echo "g.region -p; g.list rast" | feedgrass -g /opt/grass70/ -d ~/GRASSDATA/ -l test
#
# Create temp GRASS DATABASE:
#     $
#
# Dependency: GRASS GIS
#
# Author: kolesov.dm@gmail.com 
# License: BSD-2 Clause

# This code uses https://github.com/jeroenjanssens/data-science-at-the-command-line/blob/master/tools/Rio
# as a source for ideas and some code.

usage() {
cat << EOF
feedgrass: Activate or create GRASS GIS database and execute given commands

usage: feedgrass OPTIONS

OPTIONS:
   -e      Commands to execute
   -h      Show this message and exit
   -g      GISBASE   (path to GRASS binary)
   -d      GRASS DATABASE (is ignored if '-t' option used)
   -l      GRASS LOCATION (is ignored if '-t' option used)
   -m      GRASS MAPSET (is ignored if '-t' option used; PERMANENT is default)
   -t      Create temp GRASS DATABASE, execute the commands and delete the DATABASE (GRASS 7 only)
           a georefernced file must be provided to create the location
   -q      Quiet
EOF
}

finish() {
	rm -f $IN $OUT ${ERR}
        ${GISBASE}/etc/clean_temp
        rm $GISRC
}

trap finish EXIT

initGRASS(){
  

  # PATHs
  export GISBASE=$GISBASE
  export PATH=$PATH:$GISBASE/bin:$GISBASE/scripts
  if [ "$LD_LIBRARY_PATH" == "" ]
  then
    export LD_LIBRARY_PATH=$GISBASE/lib
  else
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$GISBASE/lib
  fi
  export GIS_LOCK=$$

  if [ -n "$GEOFILE" ]
  then
     echo Not implemented
     exit 1
  fi

  
  # Create GISRC file
  export GISRC=$HOME/.grassrc.$GIS_LOCK

  echo "GISDBASE: $DATABASE" > "$GISRC"
  echo "LOCATION_NAME: $LOCATION" >> "$GISRC"
  echo "MAPSET: $MAPSET" >> "$GISRC"
  echo "GRASS_GUI: text" >> "$GISRC"
  
}

callGRASS() {
        if [ "$SCRIPT" == "-" ]
        then
    	    cat /dev/stdin >> "${IN}"
	else
	    echo "$SCRIPT" >> "${IN}"
	fi
	source "${IN}"
}


SCRIPT=-
DATABASE=
LOCATION=
MAPSET=PERMANENT
GEOFILE=
QUIET=false

# OSX `mktemp' requires a temp file template, but Linux `mktemp' has it as optional.
# This explicitly uses a template, which works for both.  The $TMPDIR is in case
# it isn't set as an enviroment variable, assumes you have /tmp.
if [ -z "$TMPDIR" ]; then
    TMPDIR=/tmp/
fi

while getopts "t:hqg:e:d:l:m:" OPTION
do
	case $OPTION in
		e)
			SCRIPT=$OPTARG
			;;
                g)
                        GISBASE=$OPTARG
                        ;;
		d)
			DATABASE=$OPTARG
			;;
		l)
			LOCATION=$OPTARG
			;;
		m)
			MAPSET=$OPTARG
			;;
		t)	GEOFILE=$OPTARG
			;;
		h)
			usage
			exit 1
			;;
		q)
			QUIET=true
			;;
		?)
			usage
			exit
		;;
	esac
done


IN=$(mktemp ${TMPDIR}/GRASS-XXXXXXXX)
OUT=$(mktemp ${TMPDIR}/GRASS-XXXXXXXX).out
ERR=$(mktemp ${TMPDIR}/GRASS-XXXXXXXX).err
  



# cat /dev/stdin > ${IN} 

initGRASS

if $QUIET
then
	callGRASS > "$OUT" 2> "$ERR"
else
	callGRASS 
fi



